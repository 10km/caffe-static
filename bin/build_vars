#!/bin/bash

# 如果指定的cxx编译器版本满足版本号要求，则定义 MAKE_CXX_COMPILER ，MAKE_C_COMPILER 变量
# $1 编译器路径 
# $2 版本号限制
check_cxx_compiler(){
	if [ $# -ge 1 ]
	then
		# 当没有指定版本号时，寻找系统默认安装的编译器
		if [ -z "$2" ] ; then
			which g++ 
			if [ $? -ne 0 ] 
			then 
				echo "not found (g++)gcc compiler, please install it."
				echo "没有找到gcc编译器，请先安装gcc编译器"
				exit -1;
			fi
			local c=$(which g++)
			if [ -z "$c" ] ; then
				echo "没有找到g++(gcc)编译器，请先安装gcc编译器"
				exit -1
			fi
			local f=$( dirname "$c" )
			MAKE_CXX_COMPILER="$f/g++"
			MAKE_C_COMPILER="$f/gcc"
			return 0
		elif [ -d "$1" ] && [ -x "$1/g++" ] && [ ! $($1/g++ -dumpversion) \< "$2" ]
		then
			MAKE_CXX_COMPILER="$1/g++"
			MAKE_C_COMPILER="$1/gcc"
			return 0
		fi
		return 1
	else 
		# 参数错误，退出
		echo invalid argument:
		echo $*
		exit -1
	fi
}

# 编译器版本限制，如果对编译器版本没有要求，则注释此行
#compiler_version_limit="5.2.0"  
# 根据优先序在指定的位置搜索编译器 并判断版本找到合适的编译器，如果没有符合条件的编译器则报错退出
# 可以通过$BUILD_COMPILER_PATH 自定义编译器安装位置
! check_cxx_compiler "/usr/bin" $compiler_version_limit  && \
! check_cxx_compiler "/usr/local/bin" $compiler_version_limit  && \
! check_cxx_compiler "$BUILD_COMPILER_PATH" $compiler_version_limit && \
{ echo "(没有找到合适的编译器)not found g++ compiler required version >=$compiler_version_limit" ; exit -1; }

# 指定编译器
echo 编译器位置：
echo MAKE_CXX_COMPILER:$MAKE_CXX_COMPILER
echo MAKE_C_COMPILER:$MAKE_C_COMPILER
# cmake 参数定义
declare -r CMAKE_VARS_DEFINE="-DCMAKE_CXX_COMPILER:FILEPATH=$MAKE_CXX_COMPILER -DCMAKE_C_COMPILER:FILEPATH=$MAKE_C_COMPILER -DCMAKE_BUILD_TYPE:STRING=RELEASE"
# 脚本所在路径
declare -r DEPENDS_ROOT=$(cd $(dirname $(readlink -f $0))/..;pwd)
# 安装根目录
declare -r INSTALL_PREFIX_ROOT="$DEPENDS_ROOT/release"
# 脚本根目录
declare -r BIN_ROOT="$DEPENDS_ROOT/bin"
# 源码根目录
declare -r SOURCE_ROOT="$DEPENDS_ROOT/source"
# 压缩包根目录
declare -r PACKAGE_ROOT="$DEPENDS_ROOT/package"
# 补丁文件根目录
declare -r PATCH_ROOT="$DEPENDS_ROOT/patch"
# 工具软件根据目录
declare -r TOOLS_ROOT="$DEPENDS_ROOT/tools"
# 多线程编译参数 make -j 
declare -r MAKE_JOBS=$(cat /proc/cpuinfo| grep "processor"| wc -l)
# cmake 位置定义
CMAKE_FOLDER="cmake-3.8.2-Linux-x86_64"
CMAKE_MD5="ab02cf61915e1ad15b8523347ad37c46"
declare -r CMAKE_ROOT=$DEPENDS_ROOT/tools/$CMAKE_FOLDER
declare -r CMAKE_EXE=$CMAKE_ROOT/bin/cmake

# 定义 xxx_FOLDER 变量
define_project_folder(){
	if [ $# -eq 1 ]
	then
		declare -u prefix=$1
		local v1=${prefix}_PREFIX
		local v2=${prefix}_VERSION
		eval "${prefix}_FOLDER=${!v1}-${!v2}"
	else 
		# 参数错误，退出
		echo invalid argument:
		echo $*
		exit -1
	fi
}
# 根据$1提供的变量名前缀创建如下临时变量(local)
# prefix 项目名称
# version 版本号
# folder 项目文件夹名
# md5 源码压缩包md5校验码
# owner 项目所有者名称
# package_prefix 压缩包文件名前缀
# 调用方式 eval $(declare_project_local_vars $SNAPPY_PREFIX)
declare_project_local_vars(){
	if [ $# -eq 1 ]
	then
		declare -u prx=$1
		if [ -z "$prx" ]
		then
			echo "declare_project_local_vars:invalid argument: $1"
			exit -1
		fi
		local p=${prx}_PREFIX
		local v=${prx}_VERSION
		local f=${prx}_FOLDER
		local m=${prx}_MD5
		local o=${prx}_OWNER
		local pp=${prx}_PACKAGE_PREFIX
		echo "local prefix=${!p};local version=${!v};local folder=${!f};local md5=${!m};local owner=${!o};local package_prefix=${!pp}"
	else 
		# 参数错误，退出
		echo invalid argument:
		echo $*
		exit -1
	fi
}
##################################项目配置信息
PROTOBUF_PREFIX="protobuf"
PROTOBUF_VERSION="3.3.1"
PROTOBUF_MD5="9377e414994fa6165ecb58a41cca3b40"
PROTOBUF_OWNER="google"
PROTOBUF_PACKAGE_PREFIX="v"
PROTOBUF_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $PROTOBUF_PREFIX)
define_project_folder $PROTOBUF_PREFIX

GLOG_PREFIX="glog"
GLOG_VERSION="0.3.5"
GLOG_MD5="454766d0124951091c95bad33dafeacd"
GLOG_OWNER="google"
GLOG_PACKAGE_PREFIX="v"
GLOG_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $GLOG_PREFIX)
define_project_folder $GLOG_PREFIX

GFLAGS_PREFIX="gflags"
GFLAGS_VERSION="2.2.0"
GFLAGS_MD5="f3d31a4225a7e0e6cac50b2b65525317"
#GFLAGS_VERSION="2.1.2"
#GFLAGS_MD5_2_1_2="5cb0a1b38740ed596edb7f86cd5b3bd8"
GFLAGS_OWNER="gflags"
GFLAGS_PACKAGE_PREFIX="v"
GFLAGS_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $GFLAGS_PREFIX)
define_project_folder $GFLAGS_PREFIX

LEVELDB_PREFIX="leveldb"
LEVELDB_VERSION="1.18"
LEVELDB_MD5="06e9f4984e40ccf27af366d5bec0580a"
LEVELDB_OWNER="google"
LEVELDB_PACKAGE_PREFIX="v"
LEVELDB_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $LEVELDB_PREFIX)
define_project_folder $LEVELDB_PREFIX

SNAPPY_PREFIX="snappy"
#SNAPPY_VERSION="1.1.4"
#SNAPPY_MD5="b9bdbb6818d9c66b31edb6c037fef3d0"
SNAPPY_VERSION="master"
SNAPPY_MD5=""
SNAPPY_OWNER="google"
SNAPPY_PACKAGE_PREFIX=""
SNAPPY_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $SNAPPY_PREFIX)
define_project_folder $SNAPPY_PREFIX

OPENBLAS_PREFIX="OpenBLAS"
OPENBLAS_VERSION="0.2.20"
OPENBLAS_MD5="e0d47385423944cbd14bcb9e58930ff9"
OPENBLAS_OWNER="xianyi"
OPENBLAS_PACKAGE_PREFIX="v"
OPENBLAS_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $OPENBLAS_PREFIX)
define_project_folder $OPENBLAS_PREFIX

LMDB_PREFIX="lmdb"
LMDB_VERSION="0.9.21"
LMDB_MD5="a47ddf0fade922e8335226726be5e6c4"
LMDB_OWNER="LMDB"
LMDB_PACKAGE_PREFIX="LMDB_"
LMDB_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $LMDB_PREFIX)
define_project_folder $LMDB_PREFIX

BZIP2_PREFIX="bzip2"
BZIP2_VERSION="1.0.5"
# 1.0.5 zip 包md5校验码(github下载)
BZIP2_MD5="052fec5cdcf9ae26026c3e85cea5f573"
# 1.0.6 tar.gz包md5校验码(官网 bzip2.org 下载)
BZIP2_TAR_GZ_MD5_1_0_6="00b516f4704d4a7cb50a1d97e6e8e15b"
BZIP2_OWNER="LuaDist"
BZIP2_PACKAGE_PREFIX=""
BZIP2_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $BZIP2_PREFIX)
define_project_folder $BZIP2_PREFIX

BOOST_PREFIX="boost"
BOOST_VERSION="1.58.0"
BOOST_MD5="5a5d5614d9a07672e1ab2a250b5defc5"
BOOST_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $BOOST_PREFIX)
define_project_folder $BOOST_PREFIX

HDF5_PREFIX="hdf5"
HDF5_VERSION="1.8.16"
HDF5_MD5="a7559a329dfe74e2dac7d5e2d224b1c2"
HDF5_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $HDF5_PREFIX)
define_project_folder $HDF5_PREFIX

OPENCV_PREFIX="opencv"
#OPENCV_VERSION="2.4.9"
#OPENCV_MD5="7f958389e71c77abdf5efe1da988b80c"
OPENCV_VERSION="2.4.13.2"
OPENCV_MD5="e48803864e77fc8ae7114be4de732d80"
OPENCV_OWNER="opencv"
OPENCV_PACKAGE_PREFIX=""
OPENCV_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $OPENCV_PREFIX)
define_project_folder $OPENCV_PREFIX

SSD_PREFIX=caffe-ssd
SSD_FOLDER=caffe-ssd
SSD_INSTALL_PATH=$INSTALL_PREFIX_ROOT/$(install_suffix $SSD_PREFIX)
